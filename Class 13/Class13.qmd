---
title: "Class13"
author: "(SungWoo Park PID:69026846)"
format: pdf
---

```{r}
library(BiocManager)
library(DESeq2)
```

# Complete the missing code
```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

```{r}
head(metadata)
```

Q1. How many genes are in this dataset? 
```{r}
dim(counts)
```

838694 genes

Q2: How many control cell lines do we have? 
4 cell lines
I want to compare the control to the treated columns. To do this I will 

- Step 1. Identify and extract the "control" columns
- Step 2. Calculate the mean value per gene for all these "control" columns
- Step 3. Do the same for treated 
- Step 4. Compare the 'control,mean' and 'treated.mean' values

Step 1: 

```{r}
control.inds <- metadata$dex=="control"
```

```{r}
control.mean <- rowMeans(counts[,control.inds])
head(control.mean)
```
```{r}
treated.mean <- rowMeans(counts[,metadata$dex=="treated"])
```


Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

Lets see what these count values look like
```{r}
meancounts <- data.frame(control.mean, treated.mean)
plot(meancounts)
```

```{r}
library(ggplot2)

ggplot(meancounts) +
  aes(control.mean, treated.mean) +
  geom_point()
```

Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

geom_point

Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this? 

log

```{r}
plot(meancounts, log="xy") 
```

Logs are super useful when we have such skewed data 

```{r}
# Treated / control 
10/10 
log2(10/10)
```

```{r}
log2(20/10)
```

Add log2(Fold-change) values to our results table.

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

I need to exclude any genes with zero counts as we can't say anything about them.

```{r}
to.rm.inds <- rowSums(meancounts[,1:2] ==0) > 0
mycounts <- meancounts[!to.rm.inds, ]
```

>Q. how many genes do I have left

```{r}
nrow(mycounts)
```

> Q8. How many genes are "up regulated" i.e. have a log2(fold-change) greater than +2?

```{r}
sum(mycounts$log2fc > +2)
```
> Q9. How many are "down" with a log2(fold-change) less than -2? 

```{r}
sum(mycounts$log2fc < -2)
```

Q10. Do you trust these results? Why or why not?

No. Because we have not determined whether the differences are significant.

# 5. Setting up for DESeq

Like many bioconductor analysis packages DESeq wants it's input in a very particular way. 

```{r}
library(DESeq2)
citation("DESeq2")
```

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design=~dex)
```

To run DESeq analysis we call the main function from the package called 'DESeq(dds)'

```{r}
dds <- DESeq(dds)
```

To get the results out of this 'dds' object we can use the DESeq 'results()' function. 

```{r}
res <- results(dds)
head(res)
```

A common summary visualization is called a Volcano plot. 
```{r}
plot(res$log2FoldChange, -log(res$padj),
     xlab="Log2 Fold-Change",
     ylab="-log P-value")
abline(v=c(-2,2), col="red")
abline(h=-log(0.05), col="blue")
```

```{r}
mycols <- rep("gray", nrow(res))
mycols [ res$log2FoldChange > 2] <- "black"
mycols [ res$log2FoldChange < -2] <- "black"
mycols [ res$padj > 0.05] <- "gray"
```

```{r}
plot(res$log2FoldChange, -log(res$padj), col=mycols,
     xlab="Log2 Fold-Change",
     ylab="-log P-value")
abline(v=c(-2,2), col="red")
abline(h=-log(0.05), col="blue")
```

# Save our results to date 

```{r}
write.csv(res, file="myresults.csv")
```

# 8. Adding annotation data

We need to translate or "map" our ensemble IDs into more understandable gene names and the identifers that other useful databases use. 

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")

```

```{r}
head(res)
```

Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```

## pathway analysis

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)

```
```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```


```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![](hsa05310.pathview.png)


